#include <iostream>
#include <windows.h>
#include <time.h>
#include "Base.h"
#include "screenshotParser/screenshotMakerWindows.h"
#include <chrono>

void myDrugClick(int x, int y) {

    INPUT input;
    input.type = INPUT_MOUSE;
    input.mi.dx = (65535 * (x + 1)) / GetSystemMetrics(SM_CXSCREEN);
    input.mi.dy = (65535 * (y + 1)) / GetSystemMetrics(SM_CYSCREEN);
    input.mi.dwFlags = MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE;
    input.mi.mouseData = 0;
   // input.mi.dwExtraInfo = NULL;
    input.mi.time = 0;
    SendInput(1, &input, sizeof(INPUT));
}


Base *test = new Base();

void handler(void* data) {

    std::cout << reinterpret_cast<std::string*>(data)->c_str() << std::endl;

    //printf("it work: %s\n", static_cast<std::string>((std::string)data).c_str());
}

void testRepeatEvent(){
    int a = 0;
    while( a < 2){
        std::string yy = std::to_string(a);
        test->trigger("test", &yy);
        Sleep(500);
        a++;
    }

}
int main()
{
    getScreenShotData();

    double id = test->on("test", handler);
    testRepeatEvent();
    test->off(id);
    testRepeatEvent();

    myDrugClick( 1919, 1080 );




    Sleep(10000);
    return 0;
}

void myDrugClick(int x, int y) {

    INPUT input;
    input.type = INPUT_MOUSE;
    input.mi.dx = (65535 * (x + 1)) / GetSystemMetrics(SM_CXSCREEN);
    input.mi.dy = (65535 * (y + 1)) / GetSystemMetrics(SM_CYSCREEN);
    input.mi.dwFlags = MOUSEEVENTF_MOVE | MOUSEEVENTF_ABSOLUTE;
    input.mi.mouseData = 0;
   // input.mi.dwExtraInfo = NULL;
    input.mi.time = 0;
    SendInput(1, &input, sizeof(INPUT));
}



void drawScreenShot(HDC context, int dx, int dy, int w, int h, int sx, int sy){
    HDC screen = GetDC(NULL);
    BitBlt(context, dx, dy, w, h, screen, sx, sy, SRCCOPY);
}
